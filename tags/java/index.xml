<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on stay hungry stay foolish</title>
    <link>/tags/java/</link>
    <description>Recent content in java on stay hungry stay foolish</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2019 15:12:30 +0800</lastBuildDate>
    
	<atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tomcat Overview</title>
      <link>/post/tomcat-overview/</link>
      <pubDate>Tue, 12 Feb 2019 15:12:30 +0800</pubDate>
      
      <guid>/post/tomcat-overview/</guid>
      <description>&lt;h2 id=&#34;tomcat-server的组成部分&#34;&gt;Tomcat Server的组成部分&lt;/h2&gt;

&lt;h3 id=&#34;1-1-server&#34;&gt;1.1 – Server&lt;/h3&gt;

&lt;p&gt;A Server element represents the entire Catalina servlet container. (Singleton)&lt;/p&gt;

&lt;h3 id=&#34;1-2-service&#34;&gt;1.2 – Service&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>Java 中15种锁的介绍：公平锁，可重入锁等等……</title>
      <link>/post/java-15-lock/</link>
      <pubDate>Sat, 19 Jan 2019 07:56:14 +0800</pubDate>
      
      <guid>/post/java-15-lock/</guid>
      <description>&lt;p&gt;Java 中15种锁的介绍&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么是Devops？</title>
      <link>/post/what-is-devops/</link>
      <pubDate>Sun, 13 Jan 2019 10:06:30 +0800</pubDate>
      
      <guid>/post/what-is-devops/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;DevOps是人员，流程和产品的结合，可以为最终用户持续的提供价值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它不仅仅是流程，它不仅仅是产品或工具，它完全是人员，流程和工具，共同努力实现目标。最终以小增量单位实现价值，持续交付给终端用户，我认为这非常重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Devops实践</title>
      <link>/post/devops-in-action/</link>
      <pubDate>Sun, 13 Jan 2019 10:03:47 +0800</pubDate>
      
      <guid>/post/devops-in-action/</guid>
      <description>&lt;p&gt;强调业务目标，以用户的价值为唯一的评判标准，团队的考核评价机制也要改变，个体和团队的成功都要放在整个开发-运维生命周期内来进行评价，开发完成了很多用户需求不一定是成功，运维保障系统不down机也不一定是成功！只有用户想要的功能被及时实现了，被成功部署了，被稳定使用了才算成功。
就是把敏捷开发部门和运维部门之间的围墙打通，形成闭环&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《你的灯亮着吗?》-读书笔记</title>
      <link>/post/reading-note-your-light-on/</link>
      <pubDate>Sat, 12 Jan 2019 17:39:54 +0800</pubDate>
      
      <guid>/post/reading-note-your-light-on/</guid>
      <description>这里填写文章文章摘要。</description>
    </item>
    
    <item>
      <title>《影响力》-读书笔记</title>
      <link>/post/reading-note-influence/</link>
      <pubDate>Sat, 12 Jan 2019 17:20:43 +0800</pubDate>
      
      <guid>/post/reading-note-influence/</guid>
      <description>&lt;p&gt;主要讲的是作者对于顺从性的研究，到底是什么因素让一个人向另一个人说了“行”？哪些技术能最有效地利用这些因素。作者研究了顺从心理学，先是在实验室，后来在社会上进行参与式观察。&lt;/p&gt;

&lt;p&gt;顺从职业者：销售员、筹款家、广告商等。&lt;/p&gt;

&lt;p&gt;最后总结了六个基本类型，每一类型都是从一种能指导人们行为的基本心理原则衍生出来的，正因为如此，这些策略就具有了左右人们行为的力量，分别是 ：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《凹凸相对论》-读书笔记</title>
      <link>/post/reading-note-%E5%87%B9%E5%87%B8%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>/post/reading-note-%E5%87%B9%E5%87%B8%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>这里填写文章文章摘要。</description>
    </item>
    
    <item>
      <title>《大型网站技术架构》-读书笔记</title>
      <link>/post/reading-note-large-website-technology-architecture/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>/post/reading-note-large-website-technology-architecture/</guid>
      <description>这里填写文章文章摘要。</description>
    </item>
    
    <item>
      <title>《曾国藩的正面与侧面》-读书笔记</title>
      <link>/post/reading-note-%E6%9B%BE%E5%9B%BD%E8%97%A9%E7%9A%84%E6%AD%A3%E9%9D%A2%E4%B8%8E%E4%BE%A7%E9%9D%A2-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>/post/reading-note-%E6%9B%BE%E5%9B%BD%E8%97%A9%E7%9A%84%E6%AD%A3%E9%9D%A2%E4%B8%8E%E4%BE%A7%E9%9D%A2-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>这里填写文章文章摘要。</description>
    </item>
    
    <item>
      <title>《稀缺》-读书笔记</title>
      <link>/post/reading-note-scarcity/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>/post/reading-note-scarcity/</guid>
      <description>这里填写文章文章摘要。</description>
    </item>
    
    <item>
      <title>learn method</title>
      <link>/post/learn-method/</link>
      <pubDate>Sat, 12 Jan 2019 11:59:01 +0800</pubDate>
      
      <guid>/post/learn-method/</guid>
      <description>&lt;p&gt;首先明确的是，学习是件反人性的事，需要刻意练习的，是需要持之以恒的。&lt;/p&gt;

&lt;p&gt;很多事情能做到什么程度，其实在思想的源头就被决定了，因为它会绝大程度地受到思考问题的出发点、思维方式、格局观、价值观等因素影响。&lt;/p&gt;

&lt;h3 id=&#34;目前的状况-浅度学习&#34;&gt;目前的状况-浅度学习&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;朋友圈、头条、知乎、抖音、微博质量不高&lt;/li&gt;
&lt;li&gt;加班严重，挤占时间&lt;/li&gt;
&lt;li&gt;外网受限，英文受限，无法获得一手资料&lt;/li&gt;
&lt;li&gt;急于求成，心态浮躁，不求甚解，没有自己的思考&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>如何集成maven和Spring boot的profile功能</title>
      <link>/post/springboot-maven-profile/</link>
      <pubDate>Fri, 04 Jan 2019 23:05:13 +0800</pubDate>
      
      <guid>/post/springboot-maven-profile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天看 guns 项目的 application.properties 文件，发现了&lt;code&gt;spring.profiles.active = @profiles.active@&lt;/code&gt;的写法，查了好些资料终于搞明白了。原来是在集成maven和Spring boot的profile功能时用的，那么如何集成呢？&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（下）</title>
      <link>/post/geektime-jvm-how-execute-method-2/</link>
      <pubDate>Wed, 26 Dec 2018 11:45:43 +0800</pubDate>
      
      <guid>/post/geektime-jvm-how-execute-method-2/</guid>
      <description>&lt;p&gt;《极客时间-深入拆解java虚拟机》笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（上）</title>
      <link>/post/geektime-jvm-how-execute-method-1/</link>
      <pubDate>Tue, 25 Dec 2018 22:52:53 +0800</pubDate>
      
      <guid>/post/geektime-jvm-how-execute-method-1/</guid>
      <description>&lt;p&gt;JVM是如何执行方法调用的？（上）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解GC日志</title>
      <link>/post/jvm-understand-gc-log/</link>
      <pubDate>Mon, 24 Dec 2018 19:03:40 +0800</pubDate>
      
      <guid>/post/jvm-understand-gc-log/</guid>
      <description>&lt;p&gt;理解GC日志，基于jdk1.7,一步步看懂GC日志&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM性能调优</title>
      <link>/post/jvm-performance-optimization/</link>
      <pubDate>Mon, 24 Dec 2018 18:48:04 +0800</pubDate>
      
      <guid>/post/jvm-performance-optimization/</guid>
      <description>&lt;p&gt;linux性能调优和年轻代大小选择和年老代大小的选择&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 工具</title>
      <link>/post/jvm-tools/</link>
      <pubDate>Mon, 24 Dec 2018 18:08:25 +0800</pubDate>
      
      <guid>/post/jvm-tools/</guid>
      <description>&lt;p&gt;本文介绍了常用的JDK的命令行工具&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java虚拟机是如何加载Java类的?</title>
      <link>/post/geektime-jvm-load-java-class/</link>
      <pubDate>Mon, 24 Dec 2018 15:46:28 +0800</pubDate>
      
      <guid>/post/geektime-jvm-load-java-class/</guid>
      <description>&lt;p&gt;Java虚拟机是如何加载Java类的?&lt;/p&gt;

&lt;p&gt;虚拟机规范并没有指明二进制字节流要从一个Class文件获取，或者说根本没有指明从哪里获取、怎样获取。这种开放使得Java在很多领域得到充分运用，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从ZIP包中读取，这很常见，成为JAR，EAR，WAR格式的基础&lt;/li&gt;
&lt;li&gt;从网络中获取，最典型的应用就是Applet&lt;/li&gt;
&lt;li&gt;运行时计算生成，最典型的是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass来- 为特定接口生成形式为“*$Proxy”的代理类的二进制字节流&lt;/li&gt;
&lt;li&gt;由其他文件生成，最典型的JSP应用，由JSP文件生成对应的Class类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从class文件到内存中的类，按先后顺序需要经过&lt;strong&gt;加载、链接、以及初始化&lt;/strong&gt;三大步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java工程师成神之路（2018修订版）</title>
      <link>/post/roadmap/</link>
      <pubDate>Thu, 20 Dec 2018 11:12:42 +0800</pubDate>
      
      <guid>/post/roadmap/</guid>
      <description>&lt;p&gt;网罗了比较全面的java技术栈。&lt;/p&gt;

&lt;p&gt;本文基于微信公众号文章基础上添加，原文链接：
&lt;a href=&#34;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&#34;&gt;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>markdown语法示例</title>
      <link>/post/markdown/</link>
      <pubDate>Thu, 20 Dec 2018 10:58:38 +0800</pubDate>
      
      <guid>/post/markdown/</guid>
      <description>&lt;p&gt;本文是markdown语法的示例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对象存活判断、垃圾收集算法和垃圾收集器</title>
      <link>/post/geektime-jvm-garabage-collection/</link>
      <pubDate>Thu, 20 Dec 2018 08:44:54 +0800</pubDate>
      
      <guid>/post/geektime-jvm-garabage-collection/</guid>
      <description>&lt;p&gt;全文出自《深入理解java虚拟机》第三章。 垃圾收集器与内存分配策略。包含三部分内容：如何判断哪些对象需要回收，如何回收和一些常见的垃圾收集器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间通信</title>
      <link>/post/thread-notify/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>/post/thread-notify/</guid>
      <description>&lt;p&gt;《java并发编程的艺术》-4.3线程间通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;volatile可以用来修饰字段（成员变量），就是告知程序&lt;strong&gt;任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存&lt;/strong&gt;，它能保证所有线程对变量访问的可见性&lt;/li&gt;
&lt;li&gt;synchronized可以修饰方法或者以同步块的形式来进行使用，&lt;strong&gt;它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中&lt;/strong&gt;，它保证了线程对变量访问的可见性和排他性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>