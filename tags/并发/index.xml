<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on Quguang&#39;s Blog</title>
    <link>https://quguang.wang/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on Quguang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jan 2019 07:56:14 +0800</lastBuildDate>
    
	<atom:link href="https://quguang.wang/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中15种锁的介绍：公平锁，可重入锁等等……</title>
      <link>https://quguang.wang/post/java-15-lock/</link>
      <pubDate>Sat, 19 Jan 2019 07:56:14 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-15-lock/</guid>
      <description>&lt;p&gt;Java 中15种锁的介绍&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间通信</title>
      <link>https://quguang.wang/post/thread-notify/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>https://quguang.wang/post/thread-notify/</guid>
      <description>&lt;p&gt;《java并发编程的艺术》-4.3线程间通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;volatile可以用来修饰字段（成员变量），就是告知程序&lt;strong&gt;任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存&lt;/strong&gt;，它能保证所有线程对变量访问的可见性&lt;/li&gt;
&lt;li&gt;synchronized可以修饰方法或者以同步块的形式来进行使用，&lt;strong&gt;它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中&lt;/strong&gt;，它保证了线程对变量访问的可见性和排他性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>