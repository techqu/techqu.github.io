<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Quguang&#39;s Blog</title>
    <link>https://quguang.wang/tags/mysql/</link>
    <description>Recent content in MySQL on Quguang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2020 21:27:38 +0800</lastBuildDate>
    
	<atom:link href="https://quguang.wang/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql-行锁&#43;间隙锁（next-key lock）</title>
      <link>https://quguang.wang/post/mysql-next-key-lock/</link>
      <pubDate>Fri, 10 Jan 2020 21:27:38 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-next-key-lock/</guid>
      <description>&lt;p&gt;本文主要介绍了幻读带来的问题 ，以及 mysql给出的解决办法，即 next-key lock。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java面试-高并发-MySQL读写分离</title>
      <link>https://quguang.wang/post/java-interview-mysql-shading05/</link>
      <pubDate>Fri, 17 May 2019 18:26:55 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-interview-mysql-shading05/</guid>
      <description>&lt;p&gt;面试题 你们有没有做MySQL读写分离？如何实现mysql的读写分离？MySQL主从复制原理的是啥？如何解决mysql主从同步的延时问题？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java面试-高并发-Mysql全局唯一的id</title>
      <link>https://quguang.wang/post/java-interview-mysql-shading04/</link>
      <pubDate>Fri, 17 May 2019 18:19:24 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-interview-mysql-shading04/</guid>
      <description>&lt;p&gt;面试题 分库分表之后，id主键如何处理？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java面试-高并发-Mysql 动态扩容缩容的分库分表方案</title>
      <link>https://quguang.wang/post/java-interview-mysql-shading03/</link>
      <pubDate>Fri, 17 May 2019 17:41:34 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-interview-mysql-shading03/</guid>
      <description>&lt;p&gt;面试题 如何设计可以动态扩容缩容的分库分表方案？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java面试-高并发-Mysql-单库单表迁移到分库分表</title>
      <link>https://quguang.wang/post/java-interview-mysql-shading02/</link>
      <pubDate>Fri, 17 May 2019 17:30:42 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-interview-mysql-shading02/</guid>
      <description>&lt;p&gt;面试题 现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java面试-高并发-Mysql 分库分表</title>
      <link>https://quguang.wang/post/java-interview-mysql-shading01/</link>
      <pubDate>Fri, 17 May 2019 16:12:09 +0800</pubDate>
      
      <guid>https://quguang.wang/post/java-interview-mysql-shading01/</guid>
      <description>&lt;p&gt;面试题 为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql  B&#43;tree 索引</title>
      <link>https://quguang.wang/post/mysql-index-b&#43;tree/</link>
      <pubDate>Thu, 09 May 2019 18:43:28 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-index-b&#43;tree/</guid>
      <description>&lt;p&gt;众所周知，Mysql中的索引结构是用B+Tree实现的，那么具体是如何来构建的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- Question 03</title>
      <link>https://quguang.wang/post/mysql-question-03/</link>
      <pubDate>Wed, 27 Mar 2019 15:49:58 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-question-03/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- Order By</title>
      <link>https://quguang.wang/post/mysql-orderby/</link>
      <pubDate>Wed, 20 Mar 2019 08:49:19 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-orderby/</guid>
      <description>&lt;p&gt;在你开发应用时，一定会遇到需要根据指定的字段来显式结果的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 唯一索引和普通索引</title>
      <link>https://quguang.wang/post/mysql-index-unique-and-normal/</link>
      <pubDate>Sat, 16 Mar 2019 15:26:14 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-index-unique-and-normal/</guid>
      <description>&lt;p&gt;在不同的业务场景下，应该选择普通索引，还是唯一索引呢？接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 深入浅出索引</title>
      <link>https://quguang.wang/post/mysql-index/</link>
      <pubDate>Sat, 16 Mar 2019 15:25:44 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-index/</guid>
      <description>&lt;p&gt;简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 事务隔离</title>
      <link>https://quguang.wang/post/mysql-transaction-2/</link>
      <pubDate>Fri, 15 Mar 2019 09:26:22 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-transaction-2/</guid>
      <description>&lt;p&gt;如果是可重复读隔离级别，事务T启动的时候会创建一个视图read-view，之后事务T执行期间，即使有其他事务修改了数据，事务T看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。&lt;/p&gt;

&lt;p&gt;但是，一个事务要更新一行，如果刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 行锁、死锁、事务</title>
      <link>https://quguang.wang/post/mysql-transaction/</link>
      <pubDate>Thu, 14 Mar 2019 17:23:42 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-transaction/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-如何快速复制一张表</title>
      <link>https://quguang.wang/post/mysql-how-to-copy-table/</link>
      <pubDate>Mon, 25 Feb 2019 08:00:23 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-how-to-copy-table/</guid>
      <description>&lt;p&gt;本文源自极客时间-《MySQL实战45讲-41|如何快速复制一张表》，介绍了表复制的三种方法，并且分别比较了他们的优缺点和局限性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-Join语句是怎么执行的</title>
      <link>https://quguang.wang/post/mysql-how-join-run/</link>
      <pubDate>Fri, 22 Feb 2019 22:27:38 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-how-join-run/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql 使用Navicat 导出数据库表结构</title>
      <link>https://quguang.wang/post/mysql-navicat-structure-doc/</link>
      <pubDate>Tue, 29 Jan 2019 14:08:24 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql-navicat-structure-doc/</guid>
      <description>&lt;p&gt;我们在写数据库设计文档的时候，会需要对数据库表进行设计的编写，手动写的话会很费时间费精力，尤其是如果有大量的表需要写的时候，就更加浪费时间了。下面就让我给大家讲一个简单方法。
我的是在Navicat中导出的数据库表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-笔记</title>
      <link>https://quguang.wang/post/mysql/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>https://quguang.wang/post/mysql/</guid>
      <description>&lt;p&gt;MYSQL实战45讲-极客时间笔记&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>