<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quguang 学习笔记</title>
    <link>https://techqu.github.io/</link>
    <description>Recent content on Quguang 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Jan 2019 10:42:50 +0800</lastBuildDate>
    
	<atom:link href="https://techqu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018总结-2019展望</title>
      <link>https://techqu.github.io/post/2018-2019/</link>
      <pubDate>Wed, 16 Jan 2019 10:42:50 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/2018-2019/</guid>
      <description>2018总结 一、个人 结婚 体重暴涨 工作能力进步 了解了面试准备的重要性 二、了解和学习 领域驱动设计 devops spring security ldap service mesh mysql 网络协议 kubernetes jvm etl kylin 数据结构与算法 并发</description>
    </item>
    
    <item>
      <title>Linux三剑客之AWK学习</title>
      <link>https://techqu.github.io/post/linux-awk/</link>
      <pubDate>Tue, 02 Apr 2019 13:24:32 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/linux-awk/</guid>
      <description>&lt;p&gt;awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《Java并发编程实战》-内容简介</title>
      <link>https://techqu.github.io/post/java-concurrent/</link>
      <pubDate>Wed, 27 Mar 2019 17:31:24 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-concurrent/</guid>
      <description>&lt;p&gt;这些年，我们的CPU、内存、I/O设备都在不断迭代，不断朝着更快的方向努力。但是在这个快速发展的过程中，又一个&lt;strong&gt;核心矛盾一直存在，就是这三者的速度差异&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql Question 03</title>
      <link>https://techqu.github.io/post/mysql-question-03/</link>
      <pubDate>Wed, 27 Mar 2019 15:49:58 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-question-03/</guid>
      <description>join的写法 如果用left join，左边的表一定是驱动表吗？ 如果两个表的join包含多个条件的等值匹配，是都要写到 on 里面呢，还是只把一个条</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- Order By</title>
      <link>https://techqu.github.io/post/mysql-orderby/</link>
      <pubDate>Wed, 20 Mar 2019 08:49:19 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-orderby/</guid>
      <description>&lt;p&gt;在你开发应用时，一定会遇到需要根据指定的字段来显式结果的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 入门</title>
      <link>https://techqu.github.io/post/python-helloword/</link>
      <pubDate>Tue, 19 Mar 2019 20:04:31 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/python-helloword/</guid>
      <description>Python基础语法 输入与输出 name = raw_input(&amp;quot;What&#39;s your name?&amp;quot;) sum = 100+100 print (&#39;hello,%s&#39; %name) print (&#39;sum = %d&#39; %sum) raw_input 是 Python2.7 的输入函数，在 python3.x 里可以直接使用 input，赋值给变量 name，print</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 唯一索引和普通索引</title>
      <link>https://techqu.github.io/post/mysql-index-unique-and-normal/</link>
      <pubDate>Sat, 16 Mar 2019 15:26:14 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-index-unique-and-normal/</guid>
      <description>&lt;p&gt;在不同的业务场景下，应该选择普通索引，还是唯一索引呢？接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 深入浅出索引</title>
      <link>https://techqu.github.io/post/mysql-index/</link>
      <pubDate>Sat, 16 Mar 2019 15:25:44 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-index/</guid>
      <description>&lt;p&gt;简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 事务隔离</title>
      <link>https://techqu.github.io/post/mysql-transaction-2/</link>
      <pubDate>Fri, 15 Mar 2019 09:26:22 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-transaction-2/</guid>
      <description>&lt;p&gt;如果是可重复读隔离级别，事务T启动的时候会创建一个视图read-view，之后事务T执行期间，即使有其他事务修改了数据，事务T看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。&lt;/p&gt;

&lt;p&gt;但是，一个事务要更新一行，如果刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》- 行锁、死锁、事务</title>
      <link>https://techqu.github.io/post/mysql-transaction/</link>
      <pubDate>Thu, 14 Mar 2019 17:23:42 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-transaction/</guid>
      <description>行锁 MySQL的行锁是在引擎层由各个引擎自己实现的。比如MyISAM引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表</description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm-merge-sort/</link>
      <pubDate>Thu, 07 Mar 2019 16:54:30 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm-merge-sort/</guid>
      <description>归并排序的原理 归并排序的核心思想还是蛮简单的。如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-如何快速复制一张表</title>
      <link>https://techqu.github.io/post/mysql-how-to-copy-table/</link>
      <pubDate>Mon, 25 Feb 2019 08:00:23 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-how-to-copy-table/</guid>
      <description>&lt;p&gt;本文源自极客时间-《MySQL实战45讲-41|如何快速复制一张表》，介绍了表复制的三种方法，并且分别比较了他们的优缺点和局限性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-Join语句是怎么执行的</title>
      <link>https://techqu.github.io/post/mysql-how-join-run/</link>
      <pubDate>Fri, 22 Feb 2019 22:27:38 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-how-join-run/</guid>
      <description>1 准备工作： CREATE TABLE `t2` ( `id` int(11) NOT NULL, `a` int(11) DEFAULT NULL, `b` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `a` (`a`) ) ENGINE=InnoDB; drop procedure idata; delimiter ;; create procedure idata() begin declare i int; set i=1; while(i&amp;lt;=1000)do insert into t2 values(i, i, i); set i=i+1; end while; end;; delimiter ; call idata(); create table t1 like t2; insert into t1 (select *</description>
    </item>
    
    <item>
      <title>OSI七层网络模型分别是哪七层？各运行那些协议？</title>
      <link>https://techqu.github.io/post/network-osi/</link>
      <pubDate>Wed, 20 Feb 2019 15:29:44 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/network-osi/</guid>
      <description>层 协议 应用层 DHCP · DNS · FTP · Gopher · HTTP · IMAP4 · IRC · NNTP · XMPP · POP3 · SIP · SMTP ·SNMP · SSH · TELNET · RPC · RTCP · RTP · RTSP · SDP · SOAP · GTP · STUN · NTP · SSDP 表示层 HTTP/HTML · FTP · Telnet · ASN</description>
    </item>
    
    <item>
      <title>秒杀系统架构分析与实战</title>
      <link>https://techqu.github.io/post/java-seckill-action/</link>
      <pubDate>Mon, 18 Feb 2019 09:08:09 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-seckill-action/</guid>
      <description>1 秒杀业务分析 正常电子商务流程 （1）查询商品； （2）创建订单； （3）扣减库存； （4）更新订单； （5）付款； （6）卖家发货； 秒杀业务的特性 （1</description>
    </item>
    
    <item>
      <title>如何设计一个秒杀系统</title>
      <link>https://techqu.github.io/post/java-how-to-design-seckill/</link>
      <pubDate>Mon, 18 Feb 2019 08:56:11 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-how-to-design-seckill/</guid>
      <description>什么是秒杀 秒杀场景一般会在电商网站举行一些活动或者节假日在12306网站上抢票时遇到。对于电商网站中一些稀缺或者特价商品，电商网站一般会在约</description>
    </item>
    
    <item>
      <title>分布式系统唯一ID生成方案汇总</title>
      <link>https://techqu.github.io/post/java-distributed-id/</link>
      <pubDate>Sun, 17 Feb 2019 12:57:39 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-distributed-id/</guid>
      <description>&lt;p&gt;系统唯一ID是我们在设计一个系统的时候常常会遇见的问题，也常常为这个问题而纠结。生成ID的方法有很多，适应不同的场景、需求以及性能要求。所以有些比较复杂的系统会有多个ID生成的策略。下面就介绍一些常见的ID生成策略。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Interview Resource List</title>
      <link>https://techqu.github.io/post/java-interview-resource-list/</link>
      <pubDate>Fri, 15 Feb 2019 17:40:34 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-interview-resource-list/</guid>
      <description>&lt;p&gt;总结了一些面试资源清单&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dubbo解析及原理浅析</title>
      <link>https://techqu.github.io/post/java-dubbo-principle/</link>
      <pubDate>Fri, 15 Feb 2019 15:41:23 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-dubbo-principle/</guid>
      <description>一、Duboo基本概念解释 Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智</description>
    </item>
    
    <item>
      <title>你应该知道的 RPC 原理</title>
      <link>https://techqu.github.io/post/java-rpc/</link>
      <pubDate>Fri, 15 Feb 2019 11:10:56 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-rpc/</guid>
      <description>&lt;p&gt;在校期间大家都写过不少程序，比如写个hello world服务类，然后本地调用下，如下所示。这些程序的特点是服务消费方和服务提供方是本地调用关系。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;
 public class Test {
     public static void main(String[] args) {
         HelloWorldService helloWorldService = new HelloWorldServiceImpl();
         helloWorldService.sayHello(&amp;quot;test&amp;quot;);
     }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而一旦踏入公司尤其是大型互联网公司就会发现，公司的系统都由成千上万大大小小的服务组成，各服务部署在不同的机器上，由不同的团队负责。这时就会遇到两个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要搭建一个新服务，免不了需要依赖他人的服务，而现在他人的服务都在远端，怎么调用？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其它团队要使用我们的服务，我们的服务该怎么发布以便他人调用？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下文我们将对这两个问题展开探讨。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发编程：线程池的使用</title>
      <link>https://techqu.github.io/post/java-thread-pool/</link>
      <pubDate>Thu, 14 Feb 2019 15:04:47 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/java-thread-pool/</guid>
      <description>&lt;p&gt;在前面的文章中，我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：&lt;/p&gt;

&lt;p&gt;　　如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。&lt;/p&gt;

&lt;p&gt;　　那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？&lt;/p&gt;

&lt;p&gt;　　在Java中可以通过线程池来达到这样的效果。今天我们就来详细讲解一下Java的线程池，首先我们从最核心的ThreadPoolExecutor类中的方法讲起，然后再讲述它的实现原理，接着给出了它的使用示例，最后讨论了一下如何合理配置线程池的大小。&lt;/p&gt;

&lt;p&gt;　　若有不正之处请多多谅解，并欢迎批评指正。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>全面理解Java内存模型</title>
      <link>https://techqu.github.io/post/jmm-java/</link>
      <pubDate>Thu, 14 Feb 2019 11:26:21 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jmm-java/</guid>
      <description>Java内存模型即Java Memory Model，简称JMM。 JMM定义了Java 虚拟机(JVM)在计算机内存(RAM)中的工作方式。JVM是整个计算</description>
    </item>
    
    <item>
      <title>最新拼多多技术部面试题：幻读&#43;分段锁&#43;死锁&#43;Spring Cloud&#43;秒杀</title>
      <link>https://techqu.github.io/post/interview-exp-pdd/</link>
      <pubDate>Wed, 13 Feb 2019 08:30:08 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/interview-exp-pdd/</guid>
      <description>一面 简短自我介绍 事务的ACID，其中把事务的隔离性详细解释一遍 脏读、幻影读、不可重复读 红黑树、二叉树的算法 平常用到哪些集合类？ArrayLi</description>
    </item>
    
    <item>
      <title>5年经验Java程序员帝都面试20天，拿下数个offer，最终选择了百度</title>
      <link>https://techqu.github.io/post/interview-exp-baidu/</link>
      <pubDate>Wed, 13 Feb 2019 07:56:41 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/interview-exp-baidu/</guid>
      <description>&lt;p&gt;从事Java开发也有5年经验了，7月初来到帝都，开启面试经历，前后20天左右，主面互联网公司，一二线大公司或者是融资中的创业公司都面试过，拿了一些offer，其中包括奇虎360，最后综合决定还是去百度了。&lt;/p&gt;

&lt;p&gt;首先不同面试官面试风格一定不同，我这里就是总结这些天面试Java开发过程中的大多数问题，综合分类有Java基础，框架，多线程，网络通信，数据库以及设计模式，算法等几个模块。&lt;/p&gt;

&lt;p&gt;一名3年工作经验的Java程序员应该具备的技能，这可能是Java程序员们比较关心的内容。我这里要说明一下，以下列举的内容不是都要会的东西&amp;mdash;-但是如果你掌握得越多，最终能得到的评价、拿到的薪水势必也越高。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tomcat Overview</title>
      <link>https://techqu.github.io/post/tomcat-overview/</link>
      <pubDate>Tue, 12 Feb 2019 15:12:30 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/tomcat-overview/</guid>
      <description>&lt;h2 id=&#34;tomcat-server的组成部分&#34;&gt;Tomcat Server的组成部分&lt;/h2&gt;

&lt;h3 id=&#34;1-1-server&#34;&gt;1.1 – Server&lt;/h3&gt;

&lt;p&gt;A Server element represents the entire Catalina servlet container. (Singleton)&lt;/p&gt;

&lt;h3 id=&#34;1-2-service&#34;&gt;1.2 – Service&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>SpringBoot 究竟是如何跑起来的?</title>
      <link>https://techqu.github.io/post/springboot-how-run/</link>
      <pubDate>Tue, 12 Feb 2019 10:22:20 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/springboot-how-run/</guid>
      <description>&lt;p&gt;不得不说 SpringBoot 太复杂了，我本来只想研究一下 SpringBoot 最简单的 HelloWorld 程序是如何从 main 方法一步一步跑起来的，但是这却是一个相当深的坑。你可以试着沿着调用栈代码一层一层的深入进去，如果你不打断点，你根本不知道接下来程序会往哪里流动。这个不同于我研究过去的 Go 语言、Python 语言框架，它们通常都非常直接了当，设计上清晰易懂，代码写起来简单，里面的实现同样也很简单。但是 SpringBoot 不是，它的外表轻巧简单，但是它的里面就像一只巨大的怪兽，这只怪兽有千百只脚把自己缠绕在一起，把爱研究源码的读者绕的晕头转向。&lt;/p&gt;

&lt;p&gt;但是这 Java 编程的世界 SpringBoot 就是老大哥，你却不得不服。即使你的心中有千万头草泥马在奔跑，但是它就是天下第一。如果你是一个学院派的程序员，看到这种现象你会怀疑人生，你不得不接受一个规则 —— 受市场最欢迎的未必就是设计的最好的，里面夹杂着太多其它的非理性因素。&lt;/p&gt;

&lt;p&gt;经过了一番痛苦的折磨，我还是把 SpringBoot 的运行原理摸清楚了，这里分享给大家。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《软件测试52讲》-谈谈测试</title>
      <link>https://techqu.github.io/post/test-about/</link>
      <pubDate>Thu, 31 Jan 2019 13:39:29 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/test-about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://techqu.github.io/img/undraw/undraw_mobile_testing_reah.png&#34; alt=&#34;mobile_testing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;简单聊下我所了解的测试,测试基础知识、GUI 自动化测试、API 自动化测试、代码级测试、性能测试、测试数据准备、测试基础架构、测试新技术，测试覆盖率、软件缺陷报告、测试计划&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mongo Export Csv</title>
      <link>https://techqu.github.io/post/mongo-export-csv/</link>
      <pubDate>Tue, 29 Jan 2019 15:01:21 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mongo-export-csv/</guid>
      <description>&lt;p&gt;mongo 上查询数据，导出excel，并解决Mac上的Excel在导入CSV文件不支持utf-8的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql 使用Navicat 导出数据库表结构</title>
      <link>https://techqu.github.io/post/mysql-navicat-structure-doc/</link>
      <pubDate>Tue, 29 Jan 2019 14:08:24 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql-navicat-structure-doc/</guid>
      <description>&lt;p&gt;我们在写数据库设计文档的时候，会需要对数据库表进行设计的编写，手动写的话会很费时间费精力，尤其是如果有大量的表需要写的时候，就更加浪费时间了。下面就让我给大家讲一个简单方法。
我的是在Navicat中导出的数据库表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Drools 7.15.0 docker容器方式部署</title>
      <link>https://techqu.github.io/post/drools-7.15.0.final-docker-deploy/</link>
      <pubDate>Thu, 24 Jan 2019 14:56:49 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/drools-7.15.0.final-docker-deploy/</guid>
      <description>&lt;p&gt;关于drools的相关介绍就不再赘述了，关于drools网上的资料都很少，或者都有些老了，最近折腾了一下，记录下安装部署的过程，希望能节省下大家的时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>政事堂书单 2018</title>
      <link>https://techqu.github.io/post/booklist-zhengshitang-2018/</link>
      <pubDate>Mon, 21 Jan 2019 16:34:26 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/booklist-zhengshitang-2018/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://techqu.github.io/img/undraw/undraw_reading_list_4boi.png&#34; alt=&#34;reading_list&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Drools Documentation</title>
      <link>https://techqu.github.io/post/drools-wb-translation/</link>
      <pubDate>Sat, 19 Jan 2019 13:18:56 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/drools-wb-translation/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&#34;https://github.com/MyHerux/drools-springboot&#34;&gt;MyHerux/drools-springboot&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java 中15种锁的介绍：公平锁，可重入锁等等……</title>
      <link>https://techqu.github.io/post/15-lock-in-java/</link>
      <pubDate>Sat, 19 Jan 2019 07:56:14 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/15-lock-in-java/</guid>
      <description>&lt;p&gt;Java 中15种锁的介绍&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://techqu.github.io/about/</link>
      <pubDate>Sat, 19 Jan 2019 07:56:14 +0800</pubDate>
      
      <guid>https://techqu.github.io/about/</guid>
      <description>关于工作 从14年参加工作，到现在也有三四年了，业余时间也都有学习，可惜一直感觉工作中能用上的东西很少。 前端、服务端（java,python）</description>
    </item>
    
    <item>
      <title>值得一看的网络课程收集</title>
      <link>https://techqu.github.io/post/course-introduction/</link>
      <pubDate>Fri, 18 Jan 2019 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/course-introduction/</guid>
      <description>&lt;p&gt;前言：搜罗来一些不错的网络课程，比如Coursera, edX, Udacity上&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Navigator</title>
      <link>https://techqu.github.io/navigator/</link>
      <pubDate>Fri, 18 Jan 2019 14:35:04 +0800</pubDate>
      
      <guid>https://techqu.github.io/navigator/</guid>
      <description>| 分类 | | | | | | | | | | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | | 每日必看 | ImportNew | InfoQ | leetcode | juejin| medium | segmentfault | oschina| | | | springcloud | springboot | | | | | | | 每日必看 Fruits Vegetable 每日</description>
    </item>
    
    <item>
      <title>《深入剖析Kubernetes》-Docker的实现原理</title>
      <link>https://techqu.github.io/post/docker-introduction/</link>
      <pubDate>Thu, 17 Jan 2019 15:12:03 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/docker-introduction/</guid>
      <description>&lt;p&gt;容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造一个“边界”&lt;/p&gt;

&lt;p&gt;Docker容器具有以下3个特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量级&lt;/strong&gt;：在同一台宿主机上的容器共享系统Kernel，这使得他们可以迅速启动而且占有的内存极少。镜像是以分层文件系统构造的，这可以让它们共享相同的文件，使得磁盘使用率和镜像下载速度得到提高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放&lt;/strong&gt;：Docker容器基于开放标准，这使得Docker容器可以运行在主流Linux发行版和Windows操作系统上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全&lt;/strong&gt;：容器将各个应用程序隔离开来，这给所有的应用程序提供了一层额外的安全防护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于Docker等大多数Linux容器来说，&lt;strong&gt;Cgroups技术是用来制造约束的主要手段，而Namespace技术则是用来修改进程视图的主要方法。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入剖析Kubernetes》-入门</title>
      <link>https://techqu.github.io/post/kubernetes-introduction/</link>
      <pubDate>Thu, 17 Jan 2019 08:41:16 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/kubernetes-introduction/</guid>
      <description>&lt;p&gt;首先，Kubernetes项目要解决的问题是什么？&lt;/p&gt;

&lt;p&gt;编排？调度？容器云？还是集群管理？&lt;/p&gt;

&lt;p&gt;对于大多数用户来说，他们希望Kubernetes项目带来的体验是确定的：现在我有了应用的容器镜像，请帮我在一个给定的集群上把这个应用运行起来。更进一步地说，我还希望Kubernetes能给我提供路由网关、水平扩展、监控、备份、灾难恢复等一系列运维能力。这不就是经典Paas（比如，Cloud Foundry）项目的能力吗?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《趣谈网络协议》-Ipconfig:最熟悉又陌生的命令行</title>
      <link>https://techqu.github.io/post/ipconfig/</link>
      <pubDate>Wed, 16 Jan 2019 18:51:01 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/ipconfig/</guid>
      <description>&lt;p&gt;从一行查看IP地址的命令开始讲解，
Window上是ipconfig，Linux上是ifconfig，和 ip addr&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式事务-TCC事务：最终一致性</title>
      <link>https://techqu.github.io/post/transaction-tcc/</link>
      <pubDate>Tue, 15 Jan 2019 10:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-tcc/</guid>
      <description>TCC 事务：最终一致性 方案简介 TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Aposta</description>
    </item>
    
    <item>
      <title>分布式事务-本地消息表：最终一致性</title>
      <link>https://techqu.github.io/post/transaction-local-msg-tb/</link>
      <pubDate>Tue, 15 Jan 2019 10:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-local-msg-tb/</guid>
      <description>本地消息表：最终一致性 方案简介 本地消息表的方案最初是由 eBay 提出，核心思路是将分布式事务拆分成本地事务进行处理。 方案通过在事务主动发起方额外新建</description>
    </item>
    
    <item>
      <title>从分布式一致性谈到CAP理论、BASE理论、分布式事务</title>
      <link>https://techqu.github.io/post/distributed-consistency/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/distributed-consistency/</guid>
      <description>&lt;p&gt;什么是事务，简单说事务就是要么全不做，要么全做。一部分做一部分不做就会出一致性问题。&lt;/p&gt;

&lt;p&gt;传统的单体应用不会横跨多个数据库，可以通过单机事务保证一致性。&lt;/p&gt;

&lt;p&gt;然而在海量数据的场景下，需要对数据库做拆分，即分库分表，而Cobar、MyCat这类分库分表中间并不提供分布式事务的特性，并且基于二阶段提交的分布式事务性能较差，对于大多数业务场景来说，并不需要强一致，只需要保证最终一致性即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式事务-2PC(二阶段提交)</title>
      <link>https://techqu.github.io/post/transaction-2pc/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-2pc/</guid>
      <description>2PC(二阶段提交)方案：强一致性 方案简介 二阶段提交协议（Two-phase Commit，即 2PC）是常用的分布式事务解决方案，即将事务的提</description>
    </item>
    
    <item>
      <title>分布式事务-3PC(三阶段提交)</title>
      <link>https://techqu.github.io/post/transaction-3pc/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-3pc/</guid>
      <description>方案简介 三阶段提交协议，是二阶段提交协议的改进版本，与二阶段提交不同的是，引入超时机制。同时在协调者和参与者中都引入超时机制。 3PC把2PC</description>
    </item>
    
    <item>
      <title>什么是Devops？</title>
      <link>https://techqu.github.io/post/what-is-devops/</link>
      <pubDate>Sun, 13 Jan 2019 10:06:30 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/what-is-devops/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;DevOps是人员，流程和产品的结合，可以为最终用户持续的提供价值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它不仅仅是流程，它不仅仅是产品或工具，它完全是人员，流程和工具，共同努力实现目标。最终以小增量单位实现价值，持续交付给终端用户，我认为这非常重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Devops实践</title>
      <link>https://techqu.github.io/post/devops-in-action/</link>
      <pubDate>Sun, 13 Jan 2019 10:03:47 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/devops-in-action/</guid>
      <description>&lt;h2 id=&#34;1-配置管理&#34;&gt;1、配置管理&lt;/h2&gt;

&lt;p&gt;很多应用程序需要一些配置通过组合的配置文件，命令行参数和环境变量。
这些配置应该与镜像内容分离以保持容器化应用程序的可移植性。&lt;/p&gt;

&lt;p&gt;方案一、第三方产品
携程apollo&lt;/p&gt;

&lt;p&gt;方案二、k8s的configmap+ansible
ConfigMap API资源提供了将配置数据注入容器的机制，同时保持容器不受kubernetes的影响。ConfigMap可用于存储细粒度信息如单个属性，或粗粒度信息如整个配置文件或JSON对象。&lt;/p&gt;

&lt;p&gt;视频介绍 &lt;a href=&#34;http://fast.wistia.net/embed/iframe/qrqfj371b6?popover=true&#34;&gt;ansible来了&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《你的灯亮着吗?》-读书笔记</title>
      <link>https://techqu.github.io/post/reading-note-your-light-on/</link>
      <pubDate>Sat, 12 Jan 2019 17:39:54 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/reading-note-your-light-on/</guid>
      <description>在微信读书app上很快就看完了</description>
    </item>
    
    <item>
      <title>《影响力》-读书笔记</title>
      <link>https://techqu.github.io/post/reading-note-influence/</link>
      <pubDate>Sat, 12 Jan 2019 17:20:43 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/reading-note-influence/</guid>
      <description>&lt;p&gt;主要讲的是作者对于顺从性的研究，到底是什么因素让一个人向另一个人说了“行”？哪些技术能最有效地利用这些因素。作者研究了顺从心理学，先是在实验室，后来在社会上进行参与式观察。&lt;/p&gt;

&lt;p&gt;顺从职业者：销售员、筹款家、广告商等。&lt;/p&gt;

&lt;p&gt;最后总结了六个基本类型，每一类型都是从一种能指导人们行为的基本心理原则衍生出来的，正因为如此，这些策略就具有了左右人们行为的力量，分别是 ：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《凹凸相对论》-读书笔记</title>
      <link>https://techqu.github.io/post/reading-note-%E5%87%B9%E5%87%B8%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/reading-note-%E5%87%B9%E5%87%B8%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>在微信读书app上很快就看完了，从正反两个角度看待同样的问题，思路很不错</description>
    </item>
    
    <item>
      <title>《大型网站技术架构》-读书笔记</title>
      <link>https://techqu.github.io/post/reading-note-large-website-technology-architecture/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/reading-note-large-website-technology-architecture/</guid>
      <description>李智慧老师13年写的架构入门书，没有太深入的内容，比较适合刚刚接触网站架构的同学有个通盘的了解，也可以是有一定经验的同学作为目录一样去看。了</description>
    </item>
    
    <item>
      <title>《曾国藩的正面与侧面》-读书笔记</title>
      <link>https://techqu.github.io/post/reading-note-%E6%9B%BE%E5%9B%BD%E8%97%A9%E7%9A%84%E6%AD%A3%E9%9D%A2%E4%B8%8E%E4%BE%A7%E9%9D%A2-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Jan 2019 15:46:07 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/reading-note-%E6%9B%BE%E5%9B%BD%E8%97%A9%E7%9A%84%E6%AD%A3%E9%9D%A2%E4%B8%8E%E4%BE%A7%E9%9D%A2-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>从《曾国藩家书》了解到的曾国藩，以他为榜样，资质愚钝，后天补足。</description>
    </item>
    
    <item>
      <title>高效学习</title>
      <link>https://techqu.github.io/post/learn-method/</link>
      <pubDate>Sat, 12 Jan 2019 11:59:01 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/learn-method/</guid>
      <description>&lt;p&gt;首先明确的是，学习是件反人性的事，需要刻意练习的，是需要持之以恒的。&lt;/p&gt;

&lt;p&gt;很多事情能做到什么程度，其实在思想的源头就被决定了，因为它会绝大程度地受到思考问题的出发点、思维方式、格局观、价值观等因素影响。&lt;/p&gt;

&lt;h3 id=&#34;目前的状况-浅度学习&#34;&gt;目前的状况-浅度学习&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;朋友圈、头条、知乎、抖音、微博质量不高&lt;/li&gt;
&lt;li&gt;加班严重，挤占时间&lt;/li&gt;
&lt;li&gt;外网受限，英文受限，无法获得一手资料&lt;/li&gt;
&lt;li&gt;急于求成，心态浮躁，不求甚解，没有自己的思考&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>书单-按学科划分</title>
      <link>https://techqu.github.io/post/booklist/</link>
      <pubDate>Sun, 06 Jan 2019 15:24:35 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/booklist/</guid>
      <description>&lt;p&gt;眼界对应着拓宽，这是广度上的，如果需要深入了解一个领域，还需入手一些经典的教科书籍，经过系统的学习才能掌握。
人的精力和时间都是有限的，你不可能对每一个领域都有比较深的认识。我们都只能在有限的时间里做有限的事情，读书也须有选择。那么怎么选择呢？建议从兴趣入手。&lt;/p&gt;

&lt;p&gt;然而，我觉得&lt;strong&gt;心理学&lt;/strong&gt;和&lt;strong&gt;经济学&lt;/strong&gt;是每个人都有必要看一看的，它们能解释生活中很多看似不可理喻，实则又非常正常的现象。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>书单-按能力划分</title>
      <link>https://techqu.github.io/post/booklist-ability/</link>
      <pubDate>Sun, 06 Jan 2019 15:24:35 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/booklist-ability/</guid>
      <description>&lt;p&gt;按能力划分（附书籍豆瓣链接）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何集成maven和Spring boot的profile功能</title>
      <link>https://techqu.github.io/post/springboot-maven-profile/</link>
      <pubDate>Fri, 04 Jan 2019 23:05:13 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/springboot-maven-profile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天看 guns 项目的 application.properties 文件，发现了&lt;code&gt;spring.profiles.active = @profiles.active@&lt;/code&gt;的写法，查了好些资料终于搞明白了。原来是在集成maven和Spring boot的profile功能时用的，那么如何集成呢？&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（下）</title>
      <link>https://techqu.github.io/post/jvm-how-execute-method-2/</link>
      <pubDate>Wed, 26 Dec 2018 11:45:43 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-how-execute-method-2/</guid>
      <description>&lt;p&gt;《极客时间-深入拆解java虚拟机》笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（上）</title>
      <link>https://techqu.github.io/post/jvm-how-execute-method-1/</link>
      <pubDate>Tue, 25 Dec 2018 22:52:53 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-how-execute-method-1/</guid>
      <description>&lt;p&gt;JVM是如何执行方法调用的？（上）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解GC日志</title>
      <link>https://techqu.github.io/post/jvm-understand-gc-log/</link>
      <pubDate>Mon, 24 Dec 2018 19:03:40 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-understand-gc-log/</guid>
      <description>&lt;p&gt;理解GC日志，基于jdk1.7,一步步看懂GC日志&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM性能调优</title>
      <link>https://techqu.github.io/post/jvm-performance-optimization/</link>
      <pubDate>Mon, 24 Dec 2018 18:48:04 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-performance-optimization/</guid>
      <description>&lt;p&gt;linux性能调优和年轻代大小选择和年老代大小的选择&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 工具</title>
      <link>https://techqu.github.io/post/jvm-tools/</link>
      <pubDate>Mon, 24 Dec 2018 18:08:25 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-tools/</guid>
      <description>&lt;p&gt;本文介绍了常用的JDK的命令行工具&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java虚拟机是如何加载Java类的?</title>
      <link>https://techqu.github.io/post/how-jvm-load-java-class/</link>
      <pubDate>Mon, 24 Dec 2018 15:46:28 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/how-jvm-load-java-class/</guid>
      <description>&lt;p&gt;Java虚拟机是如何加载Java类的?&lt;/p&gt;

&lt;p&gt;虚拟机规范并没有指明二进制字节流要从一个Class文件获取，或者说根本没有指明从哪里获取、怎样获取。这种开放使得Java在很多领域得到充分运用，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从ZIP包中读取，这很常见，成为JAR，EAR，WAR格式的基础&lt;/li&gt;
&lt;li&gt;从网络中获取，最典型的应用就是Applet&lt;/li&gt;
&lt;li&gt;运行时计算生成，最典型的是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass来- 为特定接口生成形式为“*$Proxy”的代理类的二进制字节流&lt;/li&gt;
&lt;li&gt;由其他文件生成，最典型的JSP应用，由JSP文件生成对应的Class类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从class文件到内存中的类，按先后顺序需要经过&lt;strong&gt;加载、链接、以及初始化&lt;/strong&gt;三大步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java工程师成神之路（2018修订版）</title>
      <link>https://techqu.github.io/post/roadmap/</link>
      <pubDate>Thu, 20 Dec 2018 11:12:42 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/roadmap/</guid>
      <description>&lt;p&gt;网罗了比较全面的java技术栈。&lt;/p&gt;

&lt;p&gt;本文基于微信公众号文章基础上添加，原文链接：
&lt;a href=&#34;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&#34;&gt;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>markdown语法示例</title>
      <link>https://techqu.github.io/post/markdown/</link>
      <pubDate>Thu, 20 Dec 2018 10:58:38 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/markdown/</guid>
      <description>&lt;p&gt;本文是markdown语法的示例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对象存活判断、垃圾收集算法和垃圾收集器</title>
      <link>https://techqu.github.io/post/jvm-garabage-collection/</link>
      <pubDate>Thu, 20 Dec 2018 08:44:54 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-garabage-collection/</guid>
      <description>&lt;p&gt;全文出自《深入理解java虚拟机》第三章。 垃圾收集器与内存分配策略。包含三部分内容：如何判断哪些对象需要回收，如何回收和一些常见的垃圾收集器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简历模版</title>
      <link>https://techqu.github.io/post/resume/</link>
      <pubDate>Wed, 19 Dec 2018 21:45:56 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/resume/</guid>
      <description>&lt;p&gt;本文是一个markdown风格语法的简历模版，转载自网络&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《MYSQL实战45讲》-笔记</title>
      <link>https://techqu.github.io/post/mysql/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/mysql/</guid>
      <description>&lt;p&gt;MYSQL实战45讲-极客时间笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间通信</title>
      <link>https://techqu.github.io/post/thread-notify/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/thread-notify/</guid>
      <description>&lt;p&gt;《java并发编程的艺术》-4.3线程间通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;volatile可以用来修饰字段（成员变量），就是告知程序&lt;strong&gt;任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存&lt;/strong&gt;，它能保证所有线程对变量访问的可见性&lt;/li&gt;
&lt;li&gt;synchronized可以修饰方法或者以同步块的形式来进行使用，&lt;strong&gt;它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中&lt;/strong&gt;，它保证了线程对变量访问的可见性和排他性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-基础篇(1)</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含数据结构和基础算法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-基础篇(2)</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm.1/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm.1/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含一些高级算法和实际场景&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-高级篇</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm.2/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm.2/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含一些高级算法和实际场景&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://techqu.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://techqu.github.io/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>