<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>事务 on Quguang 学习笔记</title>
    <link>https://techqu.github.io/categories/%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 事务 on Quguang 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 15 Jan 2019 10:53:02 +0800</lastBuildDate>
    
	<atom:link href="https://techqu.github.io/categories/%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务-TCC事务：最终一致性</title>
      <link>https://techqu.github.io/post/transaction-tcc/</link>
      <pubDate>Tue, 15 Jan 2019 10:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-tcc/</guid>
      <description>TCC 事务：最终一致性 方案简介 TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Aposta</description>
    </item>
    
    <item>
      <title>分布式事务-本地消息表：最终一致性</title>
      <link>https://techqu.github.io/post/transaction-local-msg-tb/</link>
      <pubDate>Tue, 15 Jan 2019 10:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-local-msg-tb/</guid>
      <description>本地消息表：最终一致性 方案简介 本地消息表的方案最初是由 eBay 提出，核心思路是将分布式事务拆分成本地事务进行处理。 方案通过在事务主动发起方额外新建</description>
    </item>
    
    <item>
      <title>从分布式一致性谈到CAP理论、BASE理论、分布式事务</title>
      <link>https://techqu.github.io/post/distributed-consistency/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/distributed-consistency/</guid>
      <description>&lt;p&gt;什么是事务，简单说事务就是要么全不做，要么全做。一部分做一部分不做就会出一致性问题。&lt;/p&gt;

&lt;p&gt;传统的单体应用不会横跨多个数据库，可以通过单机事务保证一致性。&lt;/p&gt;

&lt;p&gt;然而在海量数据的场景下，需要对数据库做拆分，即分库分表，而Cobar、MyCat这类分库分表中间并不提供分布式事务的特性，并且基于二阶段提交的分布式事务性能较差，对于大多数业务场景来说，并不需要强一致，只需要保证最终一致性即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式事务-2PC(二阶段提交)</title>
      <link>https://techqu.github.io/post/transaction-2pc/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-2pc/</guid>
      <description>2PC(二阶段提交)方案：强一致性 方案简介 二阶段提交协议（Two-phase Commit，即 2PC）是常用的分布式事务解决方案，即将事务的提</description>
    </item>
    
    <item>
      <title>分布式事务-3PC(三阶段提交)</title>
      <link>https://techqu.github.io/post/transaction-3pc/</link>
      <pubDate>Mon, 14 Jan 2019 14:53:02 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/transaction-3pc/</guid>
      <description>方案简介 三阶段提交协议，是二阶段提交协议的改进版本，与二阶段提交不同的是，引入超时机制。同时在协调者和参与者中都引入超时机制。 3PC把2PC</description>
    </item>
    
  </channel>
</rss>