<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Quguang 学习笔记</title>
    <link>https://techqu.github.io/categories/tech/</link>
    <description>Recent content in Tech on Quguang 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 12 Apr 2019 17:04:30 +0800</lastBuildDate>
    
	<atom:link href="https://techqu.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《数据结构与算法之美》-红黑树</title>
      <link>https://techqu.github.io/post/data-structure-red-black-tree/</link>
      <pubDate>Fri, 12 Apr 2019 17:04:30 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-red-black-tree/</guid>
      <description>&lt;p&gt;很多书籍里，但凡讲到平衡二叉查找树，就会拿红黑树作为例子。不仅如此，如果你有一定的开发经验，你会发现，在工程中，很多用到平衡二叉查找树的地方都会用红黑树。你有没有想过，&lt;/p&gt;

&lt;p&gt;Java TreeMap实现了SortedMap接口，也就是说会按照key的大小顺序对Map中的元素进行排序，key大小的评判可以通过其本身的自然顺序（natural ordering），也可以通过构造时传入的比较器（Comparator）。&lt;/p&gt;

&lt;p&gt;TreeMap底层通过红黑树（Red-Black tree）实现，也就意味着containsKey(), get(), put(), remove()都有着log(n)的时间复杂度。其具体算法实现参照了《算法导论》。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么是Devops？</title>
      <link>https://techqu.github.io/post/what-is-devops/</link>
      <pubDate>Sun, 13 Jan 2019 10:06:30 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/what-is-devops/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;DevOps是人员，流程和产品的结合，可以为最终用户持续的提供价值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它不仅仅是流程，它不仅仅是产品或工具，它完全是人员，流程和工具，共同努力实现目标。最终以小增量单位实现价值，持续交付给终端用户，我认为这非常重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Devops实践</title>
      <link>https://techqu.github.io/post/devops-in-action/</link>
      <pubDate>Sun, 13 Jan 2019 10:03:47 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/devops-in-action/</guid>
      <description>&lt;h2 id=&#34;1-配置管理&#34;&gt;1、配置管理&lt;/h2&gt;

&lt;p&gt;很多应用程序需要一些配置通过组合的配置文件，命令行参数和环境变量。
这些配置应该与镜像内容分离以保持容器化应用程序的可移植性。&lt;/p&gt;

&lt;p&gt;方案一、第三方产品
携程apollo&lt;/p&gt;

&lt;p&gt;方案二、k8s的configmap+ansible
ConfigMap API资源提供了将配置数据注入容器的机制，同时保持容器不受kubernetes的影响。ConfigMap可用于存储细粒度信息如单个属性，或粗粒度信息如整个配置文件或JSON对象。&lt;/p&gt;

&lt;p&gt;视频介绍 &lt;a href=&#34;http://fast.wistia.net/embed/iframe/qrqfj371b6?popover=true&#34;&gt;ansible来了&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何集成maven和Spring boot的profile功能</title>
      <link>https://techqu.github.io/post/springboot-maven-profile/</link>
      <pubDate>Fri, 04 Jan 2019 23:05:13 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/springboot-maven-profile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天看 guns 项目的 application.properties 文件，发现了&lt;code&gt;spring.profiles.active = @profiles.active@&lt;/code&gt;的写法，查了好些资料终于搞明白了。原来是在集成maven和Spring boot的profile功能时用的，那么如何集成呢？&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（下）</title>
      <link>https://techqu.github.io/post/jvm-how-execute-method-2/</link>
      <pubDate>Wed, 26 Dec 2018 11:45:43 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-how-execute-method-2/</guid>
      <description>&lt;p&gt;《极客时间-深入拆解java虚拟机》笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入拆解Java虚拟机》-JVM是如何执行方法调用的？（上）</title>
      <link>https://techqu.github.io/post/jvm-how-execute-method-1/</link>
      <pubDate>Tue, 25 Dec 2018 22:52:53 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-how-execute-method-1/</guid>
      <description>&lt;p&gt;JVM是如何执行方法调用的？（上）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解GC日志</title>
      <link>https://techqu.github.io/post/jvm-understand-gc-log/</link>
      <pubDate>Mon, 24 Dec 2018 19:03:40 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-understand-gc-log/</guid>
      <description>&lt;p&gt;理解GC日志，基于jdk1.7,一步步看懂GC日志&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 工具</title>
      <link>https://techqu.github.io/post/jvm-tools/</link>
      <pubDate>Mon, 24 Dec 2018 18:08:25 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-tools/</guid>
      <description>&lt;p&gt;本文介绍了常用的JDK的命令行工具&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java虚拟机是如何加载Java类的?</title>
      <link>https://techqu.github.io/post/how-jvm-load-java-class/</link>
      <pubDate>Mon, 24 Dec 2018 15:46:28 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/how-jvm-load-java-class/</guid>
      <description>&lt;p&gt;Java虚拟机是如何加载Java类的?&lt;/p&gt;

&lt;p&gt;虚拟机规范并没有指明二进制字节流要从一个Class文件获取，或者说根本没有指明从哪里获取、怎样获取。这种开放使得Java在很多领域得到充分运用，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从ZIP包中读取，这很常见，成为JAR，EAR，WAR格式的基础&lt;/li&gt;
&lt;li&gt;从网络中获取，最典型的应用就是Applet&lt;/li&gt;
&lt;li&gt;运行时计算生成，最典型的是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass来- 为特定接口生成形式为“*$Proxy”的代理类的二进制字节流&lt;/li&gt;
&lt;li&gt;由其他文件生成，最典型的JSP应用，由JSP文件生成对应的Class类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从class文件到内存中的类，按先后顺序需要经过&lt;strong&gt;加载、链接、以及初始化&lt;/strong&gt;三大步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java工程师成神之路（2018修订版）</title>
      <link>https://techqu.github.io/post/roadmap/</link>
      <pubDate>Thu, 20 Dec 2018 11:12:42 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/roadmap/</guid>
      <description>&lt;p&gt;网罗了比较全面的java技术栈。&lt;/p&gt;

&lt;p&gt;本文基于微信公众号文章基础上添加，原文链接：
&lt;a href=&#34;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&#34;&gt;https://mp.weixin.qq.com/s/UKwZkwYmDSVTbj62ACuapg&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>markdown语法示例</title>
      <link>https://techqu.github.io/post/markdown/</link>
      <pubDate>Thu, 20 Dec 2018 10:58:38 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/markdown/</guid>
      <description>&lt;p&gt;本文是markdown语法的示例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对象存活判断、垃圾收集算法和垃圾收集器</title>
      <link>https://techqu.github.io/post/jvm-garabage-collection/</link>
      <pubDate>Thu, 20 Dec 2018 08:44:54 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/jvm-garabage-collection/</guid>
      <description>&lt;p&gt;全文出自《深入理解java虚拟机》第三章。 垃圾收集器与内存分配策略。包含三部分内容：如何判断哪些对象需要回收，如何回收和一些常见的垃圾收集器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间通信</title>
      <link>https://techqu.github.io/post/thread-notify/</link>
      <pubDate>Wed, 19 Dec 2018 17:32:22 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/thread-notify/</guid>
      <description>&lt;p&gt;《java并发编程的艺术》-4.3线程间通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;volatile可以用来修饰字段（成员变量），就是告知程序&lt;strong&gt;任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存&lt;/strong&gt;，它能保证所有线程对变量访问的可见性&lt;/li&gt;
&lt;li&gt;synchronized可以修饰方法或者以同步块的形式来进行使用，&lt;strong&gt;它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中&lt;/strong&gt;，它保证了线程对变量访问的可见性和排他性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-基础篇(1)</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含数据结构和基础算法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-基础篇(2)</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm.1/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm.1/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含一些高级算法和实际场景&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《数据结构与算法之美》-高级篇</title>
      <link>https://techqu.github.io/post/data-structure-and-algorithm.2/</link>
      <pubDate>Sun, 18 Nov 2018 15:03:48 +0800</pubDate>
      
      <guid>https://techqu.github.io/post/data-structure-and-algorithm.2/</guid>
      <description>&lt;p&gt;本文是极客时间中数据结构与算法课程的笔记，包含一些高级算法和实际场景&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>